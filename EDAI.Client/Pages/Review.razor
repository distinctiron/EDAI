@page "/review"
@using System.Text.Json
@using System.Text.Json.Serialization
@using EDAI.Shared.Models.DTO
@using EDAI.Shared.Models.Entities
@inject HttpClient _Client
@inject IJSRuntime JS


<PageTitle>Review</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Review</MudText>

<MudGrid>
    <MudItem>
        <MudSwitch @bind-Value="_selectable">Select</MudSwitch>
    </MudItem>
    <MudItem xs="12">
        <MudDataGrid T="ScoreDTO" MultiSelection="true" Items="_scores" ReadOnly="true" Bordered="false" Dense="false" bind-SelectedItems="_selectedScores" Filterable="true" SelectedItemsChanged="OnSelectedItemsChanged" @ref=_dataGrid>
            <Columns>
                @if (_selectable)
                {
                <SelectColumn T="ScoreDTO"/>
                }
                <PropertyColumn Property="s => s.StudentFirstName + ' ' + s.StudentLastName" Title="Student Name" Editable="false"/>
                <PropertyColumn Property="s => s.StudentClass" Title="Class" Editable="false"/>
                <PropertyColumn Property="s => s.AssignmentName" Title="Assignment" Editable="false"/>
                <PropertyColumn Property="s => s.ArgumentationScore" Title="Argumentation" Editable="false"/>
                <PropertyColumn Property="s => s.EloquenceScore" Title="Eloquence" Editable="false"/>
                <PropertyColumn Property="s => s.GrammarScore" Title="Grammar" Editable="false"/>
                <PropertyColumn Property="s => s.AssignmentAnswerScore" Title="Assignment Answer" Editable="false"/>
                <PropertyColumn Property="s => s.ArgumentationScore" Title="Essay Structure" Editable="false"/>
                <PropertyColumn Property="s => s.OverallScore" Title="Overall Score" Editable="false"/>
                <TemplateColumn CellClass="d-flex justify-end" Title="Reviewed Essay">
                    <CellTemplate>
                        <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" OnClick="async () => await DownloadSingleFile(context.Item.ScoreId)">File</MudButton>
                    </CellTemplate>
                </TemplateColumn>    
            </Columns>
            
            <PagerContent>
                <MudDataGridPager T="ScoreDTO" />
            </PagerContent>
        </MudDataGrid>
    </MudItem>
    <MudItem xs="12">
        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_selectedScores.Any())" OnClick="DownloadFiles"> Download files</MudButton>
    </MudItem>
</MudGrid>



@code {
    private IEnumerable<ScoreDTO> _scores;

    private MudDataGrid<ScoreDTO>? _dataGrid;

    private HashSet<ScoreDTO> _selectedScores = new HashSet<ScoreDTO>();

    private IEnumerable<AssignmentDTO> _assignments;

    private AssignmentDTO _assignment;

    private bool _selectable = false;

    protected override async Task OnInitializedAsync()
    {
        var options = new JsonSerializerOptions()
        {
            ReferenceHandler = ReferenceHandler.Preserve,
            PropertyNameCaseInsensitive = true
        };

        _scores = await _Client.GetFromJsonAsync<IEnumerable<ScoreDTO>>("api/score", options);
    }

    public async Task DownloadSingleFile(int id)
    {
        var response = await _Client.GetAsync($"api/score/{id}/downloadScoredDocumentFile");
        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsByteArrayAsync();
        var fileName = response.Content.Headers.ContentDisposition?.FileName?.Trim('"') ?? $"reviewed_{id}.docx";
        var mime = response.Content.Headers.ContentType?.ToString() ?? "application/octet-stream";
        var base64 = Convert.ToBase64String(content);

        await JS.InvokeVoidAsync("downloadFileFromBytes", fileName, mime, base64);
        
    }

    public async Task DownloadFiles()
    {
        var ids = _selectedScores.Select(s => s.EssayId);

        if (ids.Count() > 1)
        {
            var queryString = string.Join("&", ids.Select(id => $"ids={id}"));
            var url = $"api/score/bulkdownload?{queryString}";

            var response = await _Client.GetAsync(url);
            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadAsByteArrayAsync();
            var fileName = response.Content.Headers.ContentDisposition?.FileName?.Trim('"') ?? "reviewed_documents.zip";
            var mimeType = response.Content.Headers.ContentType?.ToString() ?? "application/zip";
            var base64 = Convert.ToBase64String(content);

            await JS.InvokeVoidAsync("downloadFileFromBytes", fileName, mimeType, base64);
        }
        else
        {
            var id = ids.Single();
            var response = await _Client.GetAsync($"api/score/{id}/downloadScoredDocumentFile");
            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadAsByteArrayAsync();
            var fileName = response.Content.Headers.ContentDisposition?.FileName?.Trim('"') ?? $"reviewed_{id}.docx";
            var mime = response.Content.Headers.ContentType?.ToString() ?? "application/octet-stream";
            var base64 = Convert.ToBase64String(content);

            await JS.InvokeVoidAsync("downloadFileFromBytes", fileName, mime, base64);
        }
    }
    
    private void OnSelectedItemsChanged(HashSet<ScoreDTO> selectedItems)
    {
        _selectedScores = selectedItems;
        StateHasChanged(); 
    }


}