@page "/Login"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using EDAI.Client.Identity
@using EDAI.Shared.Models.DTO
@using EDAI.Shared.Models.DTO.OpenAI
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient _Client
@inject ILocalStorageService _LocalStorage
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<PageTitle>Login</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="4">
        <MudPaper Class="pa-5">
            <MudForm Class="pb-1" Model="@model" @ref="@form" @bind-IsValid="@validCredentials" @bind-Errors="@errors">
                <MudTextField Class="ma-2" @bind-Value="model.Email" T="string" Label="Email" Required="true" RequiredError="Please specify email" 
                              Validation="@(new EmailAddressAttribute(){ErrorMessage="Invalid email address"})"/>
                <MudTextField Class="ma-2" @bind-Value="model.Password" T="string" InputType="InputType.Password" Label="Password" Required="true" RequiredError="Please specify password"/>
                <MudButton Class="mt-2" OnClick="@(async () => await Submit())" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!validCredentials)">Log in</MudButton>
            </MudForm>
            @if (errorMessageOnLogin?.Length > 0)
            {
                <MudChip T="string" Color="Color.Error">Invalid Credentials</MudChip>
            }

        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    MudForm form;
    string[] errors;
    string errorMessageOnLogin = String.Empty;
    bool validCredentials;
    LoginRequestDto model = new LoginRequestDto();

    private async Task Submit()
    {
        var loginResponse = await _Client.PostAsJsonAsync("api/identity/login", model);

        if (loginResponse.IsSuccessStatusCode)
        {
            var content = await loginResponse.Content.ReadFromJsonAsync<TokenResponseDto>();
            await _LocalStorage.SetItemAsync("authToken", content.Token);
            ((EdaiAuthStateProvider)AuthProvider).NotifyAuthenticationStateChanged();
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessageOnLogin = "Invalid login";
        }
    }
}