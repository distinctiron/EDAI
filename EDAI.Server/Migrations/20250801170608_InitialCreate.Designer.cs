// <auto-generated />
using System;
using EDAI.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EDAI.Server.Migrations
{
    [DbContext(typeof(EdaiContext))]
    [Migration("20250801170608_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EDAI.Shared.Models.Entities.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssignmentId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Open")
                        .HasColumnType("boolean");

                    b.Property<int?>("ReferenceDocumentId")
                        .HasColumnType("integer");

                    b.HasKey("AssignmentId");

                    b.HasIndex("ReferenceDocumentId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.EDAIUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OrganisationId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.EdaiDocument", b =>
                {
                    b.Property<int>("EdaiDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EdaiDocumentId"));

                    b.Property<byte[]>("DocumentFile")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("DocumentFileExtension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EdaiDocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.Essay", b =>
                {
                    b.Property<int>("EssayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EssayId"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("integer");

                    b.Property<int>("EdaiDocumentId")
                        .HasColumnType("integer");

                    b.Property<bool>("Evaluated")
                        .HasColumnType("boolean");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("EssayId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("EdaiDocumentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Essays");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.FeedbackComment", b =>
                {
                    b.Property<int>("FeedbackCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedbackCommentId"));

                    b.Property<string>("CommentFeedback")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CommentType")
                        .HasColumnType("integer");

                    b.HasKey("FeedbackCommentId");

                    b.ToTable("FeedbackComments");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.IndexedContent", b =>
                {
                    b.Property<int>("IndexedContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IndexedContentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EssayId")
                        .HasColumnType("integer");

                    b.Property<int?>("FromCharInContent")
                        .HasColumnType("integer");

                    b.Property<int>("ParagraphIndex")
                        .HasColumnType("integer");

                    b.Property<int>("RunIndex")
                        .HasColumnType("integer");

                    b.Property<int?>("ToCharInContent")
                        .HasColumnType("integer");

                    b.HasKey("IndexedContentId");

                    b.HasIndex("EssayId");

                    b.ToTable("IndexedContents");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.Organisation", b =>
                {
                    b.Property<int>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrganisationId"));

                    b.Property<string>("CVR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrganisationId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScoreId"));

                    b.Property<string>("ArgumentationRecommendation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("ArgumentationScore")
                        .HasColumnType("real");

                    b.Property<string>("AssignmentAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AssignmentAnswerRecommendation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("AssignmentAnswerScore")
                        .HasColumnType("real");

                    b.Property<string>("EloquenceRecommendation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("EloquenceScore")
                        .HasColumnType("real");

                    b.Property<int>("EssayId")
                        .HasColumnType("integer");

                    b.Property<int?>("EvaluatedEssayDocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("GrammarRecommendation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("GrammarScore")
                        .HasColumnType("real");

                    b.Property<float>("OverallScore")
                        .HasColumnType("real");

                    b.Property<string>("OverallStructure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OverallStructureRecommendation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("OverallStructureScore")
                        .HasColumnType("real");

                    b.HasKey("ScoreId");

                    b.HasIndex("EssayId");

                    b.HasIndex("EvaluatedEssayDocumentId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GraduationYear")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.StudentClass", b =>
                {
                    b.Property<int>("StudentClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentClassId"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("StudentClassId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("StudentClasses");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.StudentSummary", b =>
                {
                    b.Property<int>("StudentSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentSummaryId"));

                    b.Property<string>("FocusArea1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FocusArea2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FocusArea3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StudentSummaryId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSummaries");
                });

            modelBuilder.Entity("FeedbackCommentIndexedContent", b =>
                {
                    b.Property<int>("FeedbackCommentsFeedbackCommentId")
                        .HasColumnType("integer");

                    b.Property<int>("RelatedTextsIndexedContentId")
                        .HasColumnType("integer");

                    b.HasKey("FeedbackCommentsFeedbackCommentId", "RelatedTextsIndexedContentId");

                    b.HasIndex("RelatedTextsIndexedContentId");

                    b.ToTable("FeedbackCommentIndexedContent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.Assignment", b =>
                {
                    b.HasOne("EDAI.Shared.Models.Entities.EdaiDocument", "ReferenceDocument")
                        .WithMany()
                        .HasForeignKey("ReferenceDocumentId");

                    b.Navigation("ReferenceDocument");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.EDAIUser", b =>
                {
                    b.HasOne("EDAI.Shared.Models.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.Essay", b =>
                {
                    b.HasOne("EDAI.Shared.Models.Entities.Assignment", "Assignment")
                        .WithMany("Essays")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDAI.Shared.Models.Entities.EdaiDocument", "Document")
                        .WithMany()
                        .HasForeignKey("EdaiDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDAI.Shared.Models.Entities.Student", "Student")
                        .WithMany("Essays")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Document");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.IndexedContent", b =>
                {
                    b.HasOne("EDAI.Shared.Models.Entities.Essay", "Essay")
                        .WithMany("IndexedEssay")
                        .HasForeignKey("EssayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Essay");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.Score", b =>
                {
                    b.HasOne("EDAI.Shared.Models.Entities.Essay", "Essay")
                        .WithMany("Scores")
                        .HasForeignKey("EssayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDAI.Shared.Models.Entities.EdaiDocument", "EvaluatedEssayDocument")
                        .WithMany()
                        .HasForeignKey("EvaluatedEssayDocumentId");

                    b.Navigation("Essay");

                    b.Navigation("EvaluatedEssayDocument");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.Student", b =>
                {
                    b.HasOne("EDAI.Shared.Models.Entities.StudentClass", "StudentClass")
                        .WithMany("Students")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.StudentClass", b =>
                {
                    b.HasOne("EDAI.Shared.Models.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.StudentSummary", b =>
                {
                    b.HasOne("EDAI.Shared.Models.Entities.Student", "Student")
                        .WithMany("StudentSummaries")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FeedbackCommentIndexedContent", b =>
                {
                    b.HasOne("EDAI.Shared.Models.Entities.FeedbackComment", null)
                        .WithMany()
                        .HasForeignKey("FeedbackCommentsFeedbackCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDAI.Shared.Models.Entities.IndexedContent", null)
                        .WithMany()
                        .HasForeignKey("RelatedTextsIndexedContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EDAI.Shared.Models.Entities.EDAIUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EDAI.Shared.Models.Entities.EDAIUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDAI.Shared.Models.Entities.EDAIUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EDAI.Shared.Models.Entities.EDAIUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.Assignment", b =>
                {
                    b.Navigation("Essays");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.Essay", b =>
                {
                    b.Navigation("IndexedEssay");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.Student", b =>
                {
                    b.Navigation("Essays");

                    b.Navigation("StudentSummaries");
                });

            modelBuilder.Entity("EDAI.Shared.Models.Entities.StudentClass", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
